@extends('templates.base')
@section('head')
    <title>Лекция 11</title>

    <!-- BEGIN META -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="keywords" content="your,keywords">
    <meta name="description" content="Short explanation about this website">
    <!-- END META -->

    <!-- BEGIN STYLESHEETS -->
    {!! HTML::style('css/bootstrap.css') !!}
    {!! HTML::style('css/materialadmin.css') !!}
    {!! HTML::style('css/font-awesome.min.css') !!}
    {!! HTML::style('css/material-design-iconic-font.min.css') !!}
    <!-- END STYLESHEETS -->

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    {!! HTML::script('js/libs/utils/html5shiv.js') !!}
    {!! HTML::script('js/libs/utils/respond.min.js') !!}
    <![endif]-->


@stop
@section('content')

<!-- BEGIN BLANK SECTION -->
<section>
    <div class="section-header">
        <ol class="breadcrumb">
            <li>{!! HTML::linkRoute('home', 'Главная') !!}</li>
            <li>{!! HTML::linkRoute('library_index', 'Библиотека') !!}</li>
            <li class="active">Лекция 11.</li>
        </ol>
    </div><!--end .section-header -->
    <div class="section-body">
    </div><!--end .section-body -->
</section>
<div class="card card-tiles style-default-light" style="margin-left:2%; margin-right:2%">
<article class="style-default-bright">
<div class="card-body">
<article style="margin-left:10%; margin-right:10%; text-align: justify">
    <a name="2.7"></a>

<p><span style="line-height:1.2em">&sect; 11.1. &nbsp;Частичные арифметические функции</span></p>

<p style="margin-left:36.0pt"><strong style="line-height:1.6em"><em><a name="110">Частичная арифметическая функция</a></em></strong><em style="line-height:1.6em"> (ЧАФ)&ndash; это функция, определенная на некотором подмножестве М расширенного множества натуральных чисел </em><em style="line-height:1.6em">N</em><em style="line-height:1.6em">* и принимающая значения из множества </em><em style="line-height:1.6em">N</em><em style="line-height:1.6em">*.</em></p>

<p><span style="line-height:1.6em">Класс частичных арифметических функций шире класса арифметических функций, т.к. любая арифметическая функция является всюду определенной частичной арифметической функцией и, кроме того, существуют не всюду определенные арифметические функции. Диаграмма вхождения рассмотренных множеств друг в друга представлена на рис. (1).</span></p>

<p><strong><center>{!! HTML::image('img/library/Pic/11.1.jpg') !!}</strong></p>

<p>Рис. (1).</p></center>

<p><em style="line-height:1.6em">Примеры:</em></p>

<p><em style="line-height:1.6em">f</em><em style="line-height:1.6em">(</em><em style="line-height:1.6em">n</em><em style="line-height:1.6em">) = </em><em style="line-height:1.6em">n</em><em style="line-height:1.6em"> &ndash; 1</em></p>

<p>Для этой функции область определенности: М= [1, &infin;), область значений: N*. Т.о. функция строит соответствие<em> {1, 2, &hellip;} </em><em>&rarr;</em> <em>N</em><em>*.</em></p>

<p><em style="line-height:1.6em">f</em><em style="line-height:1.6em">(</em><em style="line-height:1.6em">n</em><em style="line-height:1.6em">) = 1 &ndash; </em><em style="line-height:1.6em">n</em></p>

<p>Для этой функции область определенности: М= [0,1], область значений: [0,1]. Т.о. функция строит соответствие<em>&nbsp; {0, 1} </em><em>&rarr;</em><em> {0, 1}.</em></p>

<p><span style="line-height:1.6em">Можно выделить два крайних случая множества частичных арифметических функций </span><em style="line-height:1.6em">f</em><em style="line-height:1.6em">(</em><em style="line-height:1.6em">n</em><em style="line-height:1.6em">)</em><span style="line-height:1.6em">: M &rarr; N*:</span></p>

<ol>
	<li><em>Всюду определенные функции.</em> M = N*. Множество всюду определенных частичных арифметических функций совпадает с множеством арифметических функций. Все остальные частичные арифметические функции имеют точки неопределенности.</li>
	<li><em>Нигде неопределенные функции</em>. M = &AElig;. Например,&nbsp; <em>f</em><em>(</em><em>n</em><em>) = 0 &ndash; (</em><em>n</em><em> + 1). </em>Нигде не определенные функции также являются &nbsp;подмножеством множества частичных арифметических функций.</li>
</ol>

<p><span style="line-height:1.6em">Для задания области определенности или множества значений частичных арифметических функций удобно использовать способ задания подмножества </span><em style="line-height:1.6em">А </em><span style="line-height:1.6em">множества натуральных чисел </span><em style="line-height:1.6em">N</em><em style="line-height:1.6em">*</em><span style="line-height:1.6em"> через характеристическую функцию.</span></p>

<p style="margin-left:36.0pt"><strong><em><a name="111">Характеристической функцией &chi;</a></em></strong><strong><em><sub>A</sub></em></strong><em> какого-нибудь подмножества А расширенного множества натуральных чисел </em><em>N</em><em>* называется функция от одной переменной, равная 1 в точках множества </em><em>A</em><em> и равная 0 в точках, не принадлежащих </em><em>A</em><em>.</em></p>

<p style="margin-left:36.0pt"><em style="line-height:1.6em">Например:</em></p>

<ul>
	<li>Характеристическая функция &chi;<sub>&Oslash;</sub>=0 (для пустого множества характеристическая функция всюду равна 0)</li>
	<li>Характеристическая функция &chi;<sub>N</sub>=1 (для расширенного множества натуральных чисел характеристическая функция всюду равна 1)</li>
	<li>Характеристическая функция &chi;<sub>A</sub>=unsg(|x-a<sub>1</sub>|∙|x-a<sub>2</sub>|∙&hellip;∙|x-a<sub>n</sub>|) для множества A={a<sub>1</sub>,a<sub>2</sub>,..,a<sub>n</sub>} : a<sub>1</sub>&lt;a<sub>2</sub>&lt;,..,&lt;a<sub>n</sub></li>
</ul>

<p><strong style="line-height:1.6em"><u>Т.</u></strong><strong style="line-height:1.6em"><u> 11.1. Теорема</u></strong></p>

<p><strong>Множество частичных арифметических функций несчетно.</strong></p>

<p><strong style="line-height:1.6em"><u>Доказательство</u></strong></p>

<p>&nbsp;Поскольку множество АФ есть подмножество ЧАФ, и множество АФ несчетно, то и множество ЧАФ также несчетно, &nbsp;<strong>Q.E.D.</strong></p>

<p><span style="line-height:1.2em">&sect; 11.2.&nbsp; Вычислимые частичные арифметические функции</span></p>

<p style="margin-left:36.0pt"><strong><em>Вычислимая частичная арифметическая функция</em></strong><em> (ВЧАФ) &ndash; это функция, для которой существует алгоритм вычисления ее значения в любой точке области определенности.</em></p>

<p><strong style="line-height:1.6em"><u>Т. 11.2. Теорема</u></strong></p>

<p><strong>Множество вычислимых частичных арифметических функций счетно и эффективно перечислимо.</strong></p>

<p style="margin-left:36.0pt"><strong><u>Доказательство</u></strong></p>

<p>Рассмотрим произвольную функцию <em>f</em><em>(</em><em>x</em><em>)</em>, принадлежащую множеству ВЧАФ. Раз функция вычислима &ndash; значит, ее можно вычислить на машине Тьюринга Т. Пусть на входной ленте будет записан параметр функции <em>x</em> в унарном коде: <strong>| | |</strong> &hellip; <strong>|</strong> (х+1 палочка). Результат вычисления &ndash; значение <em>f</em><em>(</em><em>x</em><em>)</em> также выдается в унарном коде: <strong>| | |</strong> <strong>&hellip; |</strong>. Если для данного <em>x</em> такой результат получен, значит, в точке <em>х</em> функция определена. Однако, если произошли следующие события:</p>

<ul>
	<li>машина испортила исходный параметр,</li>
	<li>машина не остановилась,</li>
	<li>машина напечатала нечитаемый результат,</li>
</ul>

<p>то будем считать, что в данной точке <em>х</em> функция <em>f</em><em>(</em><em>x</em><em>)</em> не определена.</p>

<p>Если именно так интерпретировать &laquo;неудобное&raquo; для нас поведение конкретной машины Тьюринга, то тогда можно утверждать, что любая машина Тьюринга вычисляет какую-нибудь ВЧАФ. Даже если машина при любом входном значении аргумента работает по совершенно не похожему на вычисление алгоритму, например, стирает любое слово на ленте, то мы просто считаем, что функция, которую вычисляет машина, вообще нигде не определена.</p>

<p>С другой стороны, для вычисления одной и той же функции может существовать несколько алгоритмов. Т.о. любой ВЧАФ может соответствовать несколько машин Тьюринга.</p>

<p>Рассмотрим множество машин Тьюринга. Они эффективно перечислимы. Перечислим их, попутно т.о. перечисляя все ВЧАФы, правда, возможно, некоторые ВЧАФ мы укажем несколько раз. Это довольно тонкий момент. Формально повторное указание одной и той же ВЧАФ в списке перечисления всех существующих вычислимых частичных арифметических функций несколько раз есть явное нарушение идеологии эффективной перечислимости. Строго говоря, по определению,&nbsp; термин &laquo;эффективно перечислимо&raquo; означает &laquo;возможность перечисления по алгоритму без пропусков и повторений&raquo;. В данном случае в первом приближении наблюдается нарушение этого определения. Однако если посмотреть на проблему более пристально, то можно исправить указанную &laquo;погрешность&raquo; доказательства следующим образом.</p>

<p>По сути, вычислимая частичная арифметическая функция задается не более и не менее, чем <strong><em>алгоритмом</em></strong> её вычисления в любой точке области определенности. Этот алгоритм может быть задан любым удобным образом: в виде аналитической формы (формулы), в виде набора инструкций машины Тьюринга, в виде алгоритма Маркова, в виде эффективного описания с помощью заранее согласованного языка и т.д. В этой связи, например, функция <em>f</em><em>(</em><em>x</em><em>)=</em><em>x</em><em>+1</em> может быть задана различными способами, и даже если сосредоточиться только на описании алгоритма в терминах набора инструкций (программы) машины Тьюринга, таких программ тоже можно&nbsp; составить несколько (точнее, счетно-бесконечное множество). Подтверждением этого является хотя бы тот факт, что добавление набора &laquo;холостых&raquo; инструкций (типа&nbsp; &laquo;напечатать число <em>n</em> &nbsp;в унарном коде и затем его стереть) к работающей программе не изменит её смысла, если таковым смыслом считать полученный после остановки результат.</p>

<p>При такой интерпретации термина &laquo;вычислимая частичная арифметическая функция&raquo; все становится совсем &laquo;чисто&raquo; и при перечислении машин Тьюринга мы действительно <strong><em>строго один раз</em></strong> перечисляем каждую вычислимую частичную арифметическую функцию, т.о. доказано что множество ВЧАФ является счетным и эффективно перечислимым,<strong> Q.E.D.</strong></p>

<p><span style="line-height:1.2em">&sect; 11.3.&nbsp; Эффективное распознавание и сравнение функций</span></p>

<p style="margin-left:36.0pt"><strong><em><a name="113">Эффективным распознаванием</a></em></strong><em>&nbsp; функций называется процедура, позволяющая при помощи некоторого алгоритма определить, относится ли данная функция к рассматриваемому классу. </em></p>

<p><strong style="line-height:1.6em"><u>Т. 11.3 (1) Теорема</u></strong></p>

<p><strong>Невозможно эффективно распознать функции-константы среди вычислимых арифметических функций.</strong></p>

<p style="margin-left:36.0pt"><strong><u>Доказательство</u></strong></p>

<p><em>Общая идея.</em></p>

<p>Пусть машина Тьюринга <strong>Т</strong> вычисляет некоторую функцию <em>f</em><em>(</em><em>x</em><em>)</em>. Если существует такая процедура эффективного распознавания&nbsp; &ndash; значит, существует и машина Тьюринга <strong>F</strong>, ее реализующая. В ходе своей работы машина <strong>F</strong> должна поочередно подставлять в качестве входных значений для машины <strong>Т</strong> натуральные числа и сравнивать результат работы машины <strong>Т</strong> с заданным числом (константой). Поскольку натуральных чисел &ndash; счетно-бесконечное множество, процесс сравнения может продолжаться бесконечно, а значит, однозначного ответа дать нельзя.&nbsp;</p>

<p><em style="line-height:1.6em">Строгое доказательство.</em></p>

<p>Без ограничения общности возьмем в качестве константы число 0. Построим функцию:</p>

<p style="margin-left:27.0pt">{!! HTML::image('img/library/Pic/11.2.JPG') !!}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>

<p>Например, если <strong>Т</strong> остановится на n&ndash;ом шаге, значения функции <em>f</em><em><sub>Т</sub></em><em>(</em><em>x</em><em>) </em>будут выглядеть так:</p>

<p><em>x</em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>f</em><em><sub>Т</sub></em><em>(</em><em>x</em><em>)</em></p>

<p>0 &nbsp;&nbsp;&nbsp;&nbsp; 0</p>

<p>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</p>

<p>2 &nbsp;&nbsp;&nbsp;&nbsp; 0</p>

<p>&hellip;&nbsp;&nbsp; &hellip;</p>

<p>n-2&nbsp;&nbsp; 0</p>

<p>n-1&nbsp;&nbsp; 1</p>

<p>n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</p>

<p>&hellip;&nbsp;&nbsp; &hellip;</p>

<p>Т.о. функция <em>f</em><em>(</em><em>x</em><em>)</em> окажется константой - ноль только в том случае, если машина <strong>T</strong> никогда не остановится на чистой ленте.</p>

<p>Предположим противное: пусть мы можем распознать константу - ноль среди ВАФ. Тогда для произвольной машины Тьюринга мы сможем с уверенностью сказать, остановится ли она когда-нибудь в ходе своей работы. Подобный вывод прямо противоречит теореме о неразрешимости проблемы остановки, следовательно, предположение неверно и константа-ноль (а также любые другие константы) не распознается эффективно среди вычислимых арифметических&nbsp; функций, <strong>Q.E.D.</strong></p>

<p>&nbsp;</p>

<p style="margin-left:36.0pt"><strong><em><a name="114">Эффективным сравнением</a></em></strong><em> арифметических функций называется процедура, позволяющая при помощи некоторого алгоритма определить, совпадают ли значения функций во всех точках.</em></p>

<p>&nbsp;</p>

<p><strong><u>Т. 11.3 (2) Теорема</u></strong></p>

<p><strong>Вычислимые арифметические функции не поддаются эффективному сравнению.</strong></p>

<p><strong style="line-height:1.6em"><u>Доказательство</u></strong></p>

<p>Пусть имеются две вычислимые арифметические функции&nbsp; <em>f</em><em><sub>1</sub></em><em>(</em><em>x</em><em>)</em> и <em>f</em><em><sub>2</sub></em><em>(</em><em>x</em><em>)</em>. Построим функцию <em>g</em><em>(</em><em>x</em><em>) </em>= |<em>f</em><em><sub>1</sub></em><em>(</em><em>x</em><em>) - </em><em>f</em><em><sub>2</sub></em><em>(</em><em>x</em><em>)</em>|. Данная функция является арифметической (т.к. определена на всем множестве натуральных чисел) и вычислимой (в силу вычислимости&nbsp; <em>f</em><em><sub>1</sub></em><em>(</em><em>x</em><em>)</em> и <em>f</em><em><sub>2</sub></em><em>(</em><em>x</em><em>)</em>, а также вычислимости процедуры нахождения модуля разности их значений).</p>

<p>Функция <em>g</em><em>(</em><em>x</em><em>)</em> является функцией константой - ноль, если сравниваемые функции равны. Далее продолжим доказательство теоремы методом &laquo;от противного&raquo;.</p>

<p>Предположим противное. Пусть существует алгоритм эффективного сравнения двух функций. Это значит, что существует алгоритм распознавания функции-константы ноль среди всех вычислимых арифметических функций, что противоречит доказанной ранее теореме. Значит, исходное предположение неверно, и вычислимые арифметические функции не поддаются эффективному сравнению,<strong> Q.E.D.</strong></p>

<p><strong style="line-height:1.6em"><u>Т. 11.3 (3) Теорема</u></strong></p>

<p><strong>Невозможно эффективно распознать функции-тождества среди вычислимых арифметических функций.</strong></p>

<p style="margin-left:63.0pt"><strong style="line-height:1.6em"><u>Доказательство</u></strong></p>

<p>Построим функцию</p>

<p>&nbsp;</p>

{!! HTML::image('img/library/Pic/11.3.JPG') !!}

<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>

<p>Например, если <strong>Т</strong> остановится на <em>n</em> <em>&ndash; </em>ом шаге, значения функции <em>f</em><em><sub>Т</sub></em><em>(</em><em>x</em><em>)</em> будут выглядеть так:</p>

<p>x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>f</em><em><sub>Т</sub></em><em>(</em><em>x</em><em>)</em></p>

<p>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 0</p>

<p>1&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</p>

<p>&hellip;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &hellip;</p>

<p>n-2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n-2</p>

<p>n-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n</p>

<p>&hellip;</p>

<p>Т.о. функция <em>f</em><em><sub>Т</sub></em><em>(</em><em>x</em><em>)</em> окажется функцией - тождеством только в том случае, если машина <strong>T</strong> никогда не остановится на чистой ленте.</p>

<p>Предположим противное. Пусть мы можем распознать функции-тождества&nbsp; среди ВАФ. Тогда для произвольной машины Тьюринга мы сможем с уверенностью сказать, остановится ли она когда-нибудь в ходе своей работы. Подобный вывод прямо противоречит теореме о неразрешимости проблемы остановки произвольной машины Тьюринга на чистой ленте &ndash; следовательно, сделанное предположение неверно, и функции-тождества не распознаются эффективно среди вычислимых арифметических&nbsp; функций, <strong>Q.E.D.</strong></p>

<p><strong style="line-height:1.6em"><u>Т. 11.3 (4) Теорема</u></strong></p>

<p><strong>Невозможно эффективно распознать вычислимые арифметические функции среди вычислимых частичных арифметических функций.</strong></p>

<p style="margin-left:36.0pt"><strong><u>Доказательство</u></strong></p>

<p><em>Общая идея.</em></p>

<p>По сути это означает, что не существует алгоритма, по которому можно распознать является ли вычислимая частичная арифметическая функция вычислимой арифметической функцией. Действительно, для того, чтобы понять, является ли ВЧАФ всюду определенной, нам пришлось бы вычислить ее для всех натуральных чисел, что, по словам Г.Н. Поварова, &laquo;под силу лишь бесконечному разуму&raquo;.</p>

<p><em>Строгое доказательство.</em></p>

<p>По теореме Поста (применительно к множествам ВАФ и ВЧАФ) множество ВАФ эффективно распознается в ВЧАФ тогда и только тогда, когда ВАФ эффективно перечислимо и ВЧАФ\ВАФ эффективно перечислимо.</p>

<p>&nbsp;Предположим противное. Пусть ВАФ можно эффективно распознать в ВЧАФ. Тогда ВАФ эффективно перечислимо, а это противоречит Теореме 3.1.(3), согласно которой ВАФ эффективно не перечислимо.</p>

<p>Следовательно, исходное предположение неверно и ВАФ эффективно не распознаваемо в множестве ВЧАФ, <strong>Q.E.D.</strong></p>

<p><strong style="line-height:1.6em"><u>Т. 11.3 (5) Теорема Черча</u></strong></p>

<p><strong>Невозможно эффективно распознать точки неопределенности вычислимой частичной арифметической функции.</strong></p>

<p><strong style="line-height:1.6em"><u>Доказательство</u></strong></p>

<p><em>Общая идея.</em></p>

<p>Это означает, что не существует алгоритма, по которому для произвольной ВЧАФ можно выявить все точки неопределенности. Действительно, для того, чтобы распознать даже одну точку неопределенности, нам бы пришлось ждать результата работы алгоритма вычисления функции сколь угодно долго (до тех пор, пока не будет посчитано значение функции, чего может и вовсе не случится, если это точка неопределенности).</p>

<p>&nbsp;<em>Строгое доказательство.</em></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Поскольку множество ВЧАФ n переменных эффективно перечислимо по Теореме 3.2.(2) , то перечислим их:<em> f<sub>0</sub>(x<sub>1</sub>, ..., x<sub>n</sub>), f<sub>1</sub>(x<sub>1</sub>, ..., x<sub>n</sub>), f<sub>2</sub>(x<sub>1</sub>, ..., x<sub>n</sub>), &hellip; </em></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. Построим диагональную функцию</p>


{!! HTML::image('img/library/Pic/11.4.JPG') !!}


<p>Видно, что <em>g(x<sub>1</sub>,...,x<sub>n</sub>)</em> является частичной арифметической функцией.</p>

<p>3. Предположим противное, а именно что теорема Черча не верна и существует алгоритм эффективного распознавания точек неопределенности ВЧАФ. Тогда <em>g(x<sub>1</sub>,...,x<sub>n</sub>)</em> становится вычислимой частичной арифметической функцией, то есть ВЧАФ.</p>

<p>4. Значит &nbsp;<em>g(x<sub>1</sub>,...,x<sub>n</sub>) </em>&nbsp;должна была попасть в перечисление множества ВЧАФ n переменных. Однако по построению&nbsp; <em>g(x<sub>1</sub>,...,x<sub>n</sub>) </em>&nbsp;отличается от всех перечисленных функций, т.о. в перечислении ее нет.</p>

<p>5. Получили противоречие. Значит предположение неверно, т.е. не существует алгоритма эффективного распознавания точек неопределенности ВЧАФ, <strong>Q.E.D</strong>.</p>

<p><strong style="line-height:1.6em"><em>Глоссарий учебного элемента</em></strong></p>

<ul style="list-style-type:circle">
	<li>Частичная арифметическая функция (ЧАФ)&ndash; это функция, определенная на некотором подмножестве М множества натуральных чисел N* и принимающая значения из множества N*.</li>
	<li>Характеристической функцией &chi;<sub>A</sub> какого-нибудь подмножества А множества натуральных чисел N* называется функция от одной переменной, равная 1 в точках множества A и равная 0 в точках, не принадлежащих A.</li>
	<li><u>Теорема. </u>Множество частичных арифметических функций несчетно.</li>
	<li><a name="112">Вычислимая частичная арифметическая функция (ВЧАФ) &ndash;</a> это функция, для которой существует алгоритм вычисления ее значения в любой точке области определенности.</li>
	<li><u>Теорема. </u>Множество вычислимых частичных арифметических функций счетно и эффективно перечислимо.</li>
	<li>Эффективным сравнением арифметических функций называется процедура, позволяющая при помощи некоторого алгоритма определить, совпадают ли значения функций во всех точках.</li>
	<li><u>Теорема. </u>Вычислимые арифметические функции не поддаются эффективному сравнению.</li>
	<li><u>Теорема. </u>Невозможно эффективно распознать функции-тождества среди вычислимых арифметических функций.</li>
	<li><u>Теорема. </u>Невозможно эффективно распознать вычислимые арифметические функции среди вычислимых частичных арифметических функций.</li>
	<li><u>Теорема Черча. </u>Невозможно эффективно распознать точки неопределенности вычислимой частичной арифметической функции.</li>
</ul>

<p>&nbsp;</p>

			</article></article>	</div></div>
@stop
@section('js-down')
<!-- BEGIN JAVASCRIPT -->
{!! HTML::script('js/libs/jquery/jquery-1.11.2.min.js') !!}
{!! HTML::script('js/libs/jquery/jquery-migrate-1.2.1.min.js') !!}
{!! HTML::script('js/libs/bootstrap/bootstrap.min.js') !!}
{!! HTML::script('js/libs/spin.js/spin.min.js') !!}
{!! HTML::script('js/libs/autosize/jquery.autosize.min.js') !!}
{!! HTML::script('js/libs/nanoscroller/jquery.nanoscroller.min.js') !!}
{!! HTML::script('js/core/source/App.js') !!}
{!! HTML::script('js/core/source/AppNavigation.js') !!}
{!! HTML::script('js/core/source/AppOffcanvas.js') !!}
{!! HTML::script('js/core/source/AppCard.js') !!}
{!! HTML::script('js/core/source/AppForm.js') !!}
{!! HTML::script('js/core/source/AppNavSearch.js') !!}
{!! HTML::script('js/core/source/AppVendor.js') !!}
{!! HTML::script('js/core/demo/Demo.js') !!}
<!-- END JAVASCRIPT -->
@stop
